<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>html初级基础知识整理</title>
      <link href="/2021/09/26/html-ji-chu-zhi-shi-pan-dian/"/>
      <url>/2021/09/26/html-ji-chu-zhi-shi-pan-dian/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基础知识脑图总结"><a href="#1-基础知识脑图总结" class="headerlink" title="1.基础知识脑图总结"></a>1.基础知识脑图总结</h2><p><img src="/img/html/html2.png"></p><hr><h2 id="2-基本简介"><a href="#2-基本简介" class="headerlink" title="2.基本简介"></a>2.基本简介</h2><hr><h3 id="2-1-什么是Html"><a href="#2-1-什么是Html" class="headerlink" title="2.1.什么是Html"></a>2.1.什么是Html</h3><p>Html不是编程语言，而是用来描述网页结构的一种标记语言 ，简单的说就是给展示在网页上的文本加上表示文本含义的标签，让人们可以更好的理解 。</p><h3 id="2-2-什么是Html5"><a href="#2-2-什么是Html5" class="headerlink" title="2.2.什么是Html5"></a>2.2.什么是Html5</h3><p>Html5是定义html标准的最新版本，是一个新的html语言，具有新的元素，属性和行为 ，新增了一些改变，例如标签语义化等。</p><hr><h2 id="3-基本语法"><a href="#3-基本语法" class="headerlink" title="3.基本语法"></a>3.基本语法</h2><hr><ul><li>html标签是有尖括号（&lt;和&gt;）包围的关键词，不区分大小写，推荐使用小写 ；</li><li>html标签是成对出现</li><li>html标签也存在空元素（不包含文本及其他属性的标签）例如&lt;img/&gt;</li><li>html文档包含的内容 ：文本、链接、图片、表格、表单、列表、框架等</li></ul><hr><h2 id="4-基本概念"><a href="#4-基本概念" class="headerlink" title="4.基本概念"></a>4.基本概念</h2><hr><h3 id="4-1-什么是标签"><a href="#4-1-什么是标签" class="headerlink" title="4.1.什么是标签"></a>4.1.什么是标签</h3><p>用尖括号包围的关键字就是标签，存在开始标签和结束标签 。</p><h3 id="4-2-什么是元素"><a href="#4-2-什么是元素" class="headerlink" title="4.2.什么是元素"></a>4.2.什么是元素</h3><p>简单讲就是标签+标签包含的文本内容 ，元素又分为三种，分别是<strong>块级元素、内联元素和内联块级元素</strong>。<br><strong>块级元素：</strong></p><ul><li>在浏览器显示默认是在新的一行开始（和结束）的元素</li><li>高度，宽度，行高以及距离顶部和底部的距离都可以设置</li><li>宽度默认是和父元素的宽度保持一直（父容器的100%）</li><li>常见的块级元素：<strong>div; p; h1; ol; li; dl; form; table; address</strong>等</li><li>使用<strong>display:block</strong>可以将元素转为块级元素</li></ul><p><strong>内联元素：</strong></p><ul><li>也叫行内元素，在浏览器中默认按照从左到右显示，不独占一行</li><li>高度，宽度以及距离顶部和底部的距离不可设置</li><li>宽度就是它包含的文字或者图片的宽度</li><li>常见的内联元素：<strong>a; span; br; i; em; lable; q;strong</strong>等</li><li>使用<strong>display:inline</strong>可将块级元素转为内联元素</li></ul><p><strong>内联块级元素：</strong></p><ul><li>同时具备内联元素和块级元素的特点</li><li>和其他元素在一行上</li><li>元素的宽度和高度以及距离顶部和底部的距离都是可以设置的</li><li>常见的内联块级元素：<strong>img; input</strong></li><li>使用<strong>display:inline-block; float:left/right; position: absolute/fixed</strong>可以将元素转为内联块级元素</li></ul><h3 id="4-3-什么是属性"><a href="#4-3-什么是属性" class="headerlink" title="4.3.什么是属性"></a>4.3.什么是属性</h3><p>属性就是在开始标签中以名称+值存在的内容就是属性。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;a href="index.html"&gt;&lt;/a&gt;</code></pre><p><strong>常见的全局属性：</strong></p><ul><li><strong>id</strong>：控制元素的唯一</li><li><strong>class</strong>：设置元素一个或者类名，用于样式表中的类</li><li><strong>style</strong>：设置元素的行内样式</li><li><strong>title</strong>：定义元素的提示信息</li><li><strong>lang</strong>：设置元素内容的语言代码</li><li><strong>accesskey</strong>：设置访问元素的键盘快捷键</li><li><strong>tabindex</strong>：设置元素的tab键次序</li></ul><p><strong>常见的元素属性：</strong></p><ul><li><strong>href</strong>：指定链接到互联网或者其他资源</li><li><strong>target</strong>：指定打开链接的目标窗口</li><li><strong>title</strong>：指定所要链接的页面的文本描述</li><li><strong>src</strong>：指定请求资源的服务器路径</li><li><strong>alt</strong>：指定图片未加载时候显示的文字</li></ul><hr><h2 id="5-常见元素"><a href="#5-常见元素" class="headerlink" title="5.常见元素"></a>5.常见元素</h2><hr><h3 id="5-1-根元素"><a href="#5-1-根元素" class="headerlink" title="5.1.根元素"></a>5.1.根元素</h3><ul><li><code>doctype</code>：定义文档类型</li><li><code>html</code>：定义Html文档 <pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;!DOCTYPE html&gt;</code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;html lang="en"&gt;</code></pre><h3 id="5-2-元数据元素"><a href="#5-2-元数据元素" class="headerlink" title="5.2.元数据元素"></a>5.2.元数据元素</h3></li><li><code>head</code>：定义文档信息</li><li><code>meta</code>：定义文档的元数据</li><li><code>title</code>：定义文档的标题<pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;首页&lt;/title&gt;&lt;/head&gt;</code></pre><h3 id="5-3-块级元素"><a href="#5-3-块级元素" class="headerlink" title="5.3.块级元素"></a>5.3.块级元素</h3></li><li><code>body</code>：定义文档主体内容</li><li><code>h1</code>、<code>h2</code>…<code>h6</code>：定义文档标题</li><li><code>ul</code>、<code>li</code>、<code>dl</code>：定义列表<pre class="line-numbers language-html" data-language="html"><code class="language-html">&lt;div&gt;    &lt;h1&gt;一级标题&lt;/h1&gt;    &lt;p&gt;段落&lt;/p&gt;    &lt;blockquote&gt;段落长引用&lt;/blockquote&gt;    &lt;table&gt;        &lt;thead&gt;            &lt;th&gt;&lt;/th&gt;        &lt;/thead&gt;    &lt;/table&gt;&lt;/div&gt;</code></pre></li></ul><hr><blockquote>说明：由于Html标签太多，就不再一一列举了，推荐一个API文档WebDoc  (https://developer.mozilla.org/zh-CN/)</blockquote><hr><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><hr><p>Html初级知识主要设计基本语法、基本声明使用、基本的概念、常用的元素和常用的属性，重点在于知道块级元素和内联元素之间的区别，以及那些元素是什块级元素，那些元素是内联元素。最重点的是学会如何查找API。</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE----解决页面刷新Vuex中的数据清空</title>
      <link href="/2021/09/17/vue-jie-jue-ye-mian-shua-xin-vuex-zhong-de-shu-ju-qing-kong/"/>
      <url>/2021/09/17/vue-jie-jue-ye-mian-shua-xin-vuex-zhong-de-shu-ju-qing-kong/</url>
      
        <content type="html"><![CDATA[<ul><li>vuex是一个很好用的状态管理模式，但是当我们先将数据保存到store中，然后重新刷新页面会发现store中的数据被重置了，这是因为store中的数据存储在内存之中。<h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5></li><li>既然内存中数据刷新会丢失，那么就可以在刷新的时候将数据保存到本地缓存，下次加载store中的数据时先去缓存中获取，没有缓存再加载默认初始值</li></ul><h2 id="1-方法1："><a href="#1-方法1：" class="headerlink" title="1.方法1："></a>1.方法1：</h2><h3 id="1-1刷新时缓存？？？"><a href="#1-1刷新时缓存？？？" class="headerlink" title="1.1刷新时缓存？？？"></a>1.1刷新时缓存？？？</h3><p>我们想要在刷新的时候进行缓存数据操作，我们就需要使用windows的unload事件，我们来看看这个unload事件：<br><img src="/img/vuex/vuex-code2.png"><br>我们刷新页面的时候就可以触发这个unload事件，GOOD！！！</p><h3 id="1-2何时添加监听事件？？？"><a href="#1-2何时添加监听事件？？？" class="headerlink" title="1.2何时添加监听事件？？？"></a>1.2何时添加监听事件？？？</h3><ul><li>我们知道整个vue的生命周期首先在main.js中挂载一堆东西，然后挂载一个app组件，我们很想趁早添加这个unload的事件监听，但是为了保证main.js的简洁性，我们选择将这个监听放在app组件的created钩子函数中</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">//示例代码..   methods:{      //将store中的数据存放到sessionStorage        saveState() {          sessionStorage.setItem("state", JSON.stringify(this.$store.state));        }    },    created() {      //向window添加unload事件        window.addEventListener("unload", this.saveState);    }</code></pre><h3 id="1-3sessionStorage"><a href="#1-3sessionStorage" class="headerlink" title="1.3sessionStorage???"></a>1.3sessionStorage???</h3><p><img src="/img/vuex/vuex-code1.png"></p><h3 id="1-4修改state数据加载"><a href="#1-4修改state数据加载" class="headerlink" title="1.4修改state数据加载"></a>1.4修改state数据加载</h3><ul><li>之前我们一直是每次加载store直接去获取默认值，现在我们需要先去看看缓存中是否有数据<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">//示例代码：  const state = sessionStorage.getItem('state') ? JSON.parse(sessionStorage.getItem('state'))：{默认值}</code></pre></li><li>1.5现在我们就可以在刷新页面的时候一直能保持store中的数据了  </li></ul><h2 id="2-方法2："><a href="#2-方法2：" class="headerlink" title="2.方法2："></a>2.方法2：</h2><h3 id="2-1下载插件："><a href="#2-1下载插件：" class="headerlink" title="2.1下载插件："></a>2.1下载插件：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install --save vuex-persistedstate</code></pre><h3 id="2-使用示例代码："><a href="#2-使用示例代码：" class="headerlink" title="2.使用示例代码："></a>2.使用示例代码：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">import Vue from 'vue'import Vuex from 'vuex'import persistedState from 'vuex-persistedstate'import state from './state.js'import mutations from './mutations.js'import getters from './getters.js'Vue.use(Vuex)const store = new Vuex.Store({    plugins: [      persistedState({ storage: window.sessionStorage })    ],    state:state,    mutations:mutations,    getters:getters})export default store</code></pre>]]></content>
      
      
      <categories>
          
          <category> vuex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
