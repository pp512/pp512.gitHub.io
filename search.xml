<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VUE----解决页面刷新Vuex中的数据清空</title>
      <link href="/2021/09/17/VUE----%E8%A7%A3%E5%86%B3%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0Vuex%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B8%85%E7%A9%BA/"/>
      <url>/2021/09/17/VUE----%E8%A7%A3%E5%86%B3%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0Vuex%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B8%85%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<ul><li>vuex是一个很好用的状态管理模式，但是当我们先将数据保存到store中，然后重新刷新页面会发现store中的数据被重置了，这是因为store中的数据存储在内存之中。<h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5></li><li>既然内存中数据刷新会丢失，那么就可以在刷新的时候将数据保存到本地缓存，下次加载store中的数据时先去缓存中获取，没有缓存再加载默认初始值</li></ul><h2 id="1-方法1："><a href="#1-方法1：" class="headerlink" title="1.方法1："></a>1.方法1：</h2><h3 id="1-1刷新时缓存？？？"><a href="#1-1刷新时缓存？？？" class="headerlink" title="1.1刷新时缓存？？？"></a>1.1刷新时缓存？？？</h3><p>我们想要在刷新的时候进行缓存数据操作，我们就需要使用windows的unload事件，我们来看看这个unload事件：<br><img src="/img/vuex/vuex-code2.png"><br>我们刷新页面的时候就可以触发这个unload事件，GOOD！！！</p><h3 id="1-2何时添加监听事件？？？"><a href="#1-2何时添加监听事件？？？" class="headerlink" title="1.2何时添加监听事件？？？"></a>1.2何时添加监听事件？？？</h3><ul><li>我们知道整个vue的生命周期首先在main.js中挂载一堆东西，然后挂载一个app组件，我们很想趁早添加这个unload的事件监听，但是为了保证main.js的简洁性，我们选择将这个监听放在app组件的created钩子函数中</li></ul><pre class=" language-bash"><code class="language-bash">//示例代码<span class="token punctuation">..</span>   methods:<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      //将store中的数据存放到sessionStorage        saveState<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          sessionStorage.setItem<span class="token punctuation">(</span><span class="token string">"state"</span>, JSON.stringify<span class="token punctuation">(</span>this.<span class="token variable">$store</span>.state<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;,</span>    created<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      //向window添加unload事件        window.addEventListener<span class="token punctuation">(</span><span class="token string">"unload"</span>, this.saveState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> vuex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
