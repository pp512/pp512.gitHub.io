<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VUE----解决页面刷新Vuex中的数据清空</title>
      <link href="/2021/09/17/VUE----%E8%A7%A3%E5%86%B3%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0Vuex%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B8%85%E7%A9%BA/"/>
      <url>/2021/09/17/VUE----%E8%A7%A3%E5%86%B3%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0Vuex%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B8%85%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<ul><li>vuex是一个很好用的状态管理模式，但是当我们先将数据保存到store中，然后重新刷新页面会发现store中的数据被重置了，这是因为store中的数据存储在内存之中。<h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5></li><li>既然内存中数据刷新会丢失，那么就可以在刷新的时候将数据保存到本地缓存，下次加载store中的数据时先去缓存中获取，没有缓存再加载默认初始值</li></ul><h2 id="1-方法1："><a href="#1-方法1：" class="headerlink" title="1.方法1："></a>1.方法1：</h2><h3 id="1-1刷新时缓存？？？"><a href="#1-1刷新时缓存？？？" class="headerlink" title="1.1刷新时缓存？？？"></a>1.1刷新时缓存？？？</h3><p>我们想要在刷新的时候进行缓存数据操作，我们就需要使用windows的unload事件，我们来看看这个unload事件：<br><img src="/img/vuex/vuex-code2.png"><br>我们刷新页面的时候就可以触发这个unload事件，GOOD！！！</p><h3 id="1-2何时添加监听事件？？？"><a href="#1-2何时添加监听事件？？？" class="headerlink" title="1.2何时添加监听事件？？？"></a>1.2何时添加监听事件？？？</h3><ul><li>我们知道整个vue的生命周期首先在main.js中挂载一堆东西，然后挂载一个app组件，我们很想趁早添加这个unload的事件监听，但是为了保证main.js的简洁性，我们选择将这个监听放在app组件的created钩子函数中</li></ul><pre><code class="javascript">//示例代码..   methods:&#123;      //将store中的数据存放到sessionStorage        saveState() &#123;          sessionStorage.setItem(&quot;state&quot;, JSON.stringify(this.$store.state));        &#125;    &#125;,    created() &#123;      //向window添加unload事件        window.addEventListener(&quot;unload&quot;, this.saveState);    &#125;</code></pre><h3 id="1-3sessionStorage"><a href="#1-3sessionStorage" class="headerlink" title="1.3sessionStorage???"></a>1.3sessionStorage???</h3><p><img src="/img/vuex/vuex-code1.png"></p><h3 id="1-4修改state数据加载"><a href="#1-4修改state数据加载" class="headerlink" title="1.4修改state数据加载"></a>1.4修改state数据加载</h3><ul><li>之前我们一直是每次加载store直接去获取默认值，现在我们需要先去看看缓存中是否有数据<pre><code class="javascript">//示例代码：const state = sessionStorage.getItem(&#39;state&#39;) ? JSON.parse(sessionStorage.getItem(&#39;state&#39;))：&#123;默认值&#125;</code></pre></li><li>1.5现在我们就可以在刷新页面的时候一直能保持store中的数据了  </li></ul><h2 id="2-方法2："><a href="#2-方法2：" class="headerlink" title="2.方法2："></a>2.方法2：</h2><h3 id="2-1下载插件："><a href="#2-1下载插件：" class="headerlink" title="2.1下载插件："></a>2.1下载插件：</h3><pre><code class="javascript">npm install --save vuex-persistedstate</code></pre><h3 id="2-使用示例代码："><a href="#2-使用示例代码：" class="headerlink" title="2.使用示例代码："></a>2.使用示例代码：</h3><pre><code class="javascript">import Vue from &#39;vue&#39;import Vuex from &#39;vuex&#39;import persistedState from &#39;vuex-persistedstate&#39;import state from &#39;./state.js&#39;import mutations from &#39;./mutations.js&#39;import getters from &#39;./getters.js&#39;Vue.use(Vuex)const store = new Vuex.Store(&#123;    plugins: [      persistedState(&#123; storage: window.sessionStorage &#125;)    ],    state:state,    mutations:mutations,    getters:getters&#125;)export default store</code></pre>]]></content>
      
      
      <categories>
          
          <category> vuex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
